JSP가 등장하게 된 배경
1. 문제점
	- 웹 프로그램의 화면 기능이 복잡해지므로 서블릿의 자바 기반으로 화면 기능 구현 시 어려움이 발생함.
	- 디자이너 입장에서 화면 구현 시 자바 코드로 인해 작업이 어려움. ==> 자바에 대한 지식이 없는 경우.
	- 서블릿에 비지니스 로직과 화면 구현 기능이 같이 있다 보니 개발 후 유지관리가 어려움.
2. 해결책
	- 서블릿의 비지니스 로직과 결과를 보여주는 화면 기능을 분리하자.
	- 비지니스 로직과 화면을 분리함으로써 개발자는 비지니스 로직 구현에 집중하고, 디자이너는 화면 기능 구현에 집중하자.
	- 개발 후 재사용성과 유지관리가 훨씬 수월해진다.
	
JSP 동작방식의 구성 요소
1. <% 자바코드 %> : 스크립트릿 ==> 자바코드를 작성하고 실행할 때 사용.
2. <%=		%> : JSP 표현식 ==> 변수나 메서드의 결과값을 출력할 때 사용.
3. <%!		%> : JSP 선언부 ==> 메서드를 선언할 때 사용.

서블릿: 자바코드안에 HTML
JSP : HTML코드안에 자바코드..? ↑저렇게 나오면 자바와 관련된 코드들


JSP 내장 객체
- 객체를 생성하지 않고 사용할 수 있는 객체를 의미.
- 내장 객체는 JSP 페이지 내에서 제공하는 특수한 레퍼런스 타입의 변수이다.
- JSP 페이지에서 사용하게 되는 특수한 레퍼런스 타입의 변수가 아무런 선언과 
	객체 생성 없이 사용할 수 있는 이유는  JSP페이지가 Servlet으로 변환될 때 
	JSP 컨테이너가 자동적으로 제공을 해 주고 있기 때문임.

JSP 내장 객체 종류
- pageContext : JSP 페이지에 대한 정보를 저장하고 있는 객체.
- request : 웹 브라우저의 요청 정보를 저장하고 있는 객체.
- response : 웹 브라우저의 요청에 대한 응답 정보를 저장하고 있는 객체.
- out : JSP 페이지에 출력할 내용을 저장하고 있는 객체.
- session : 하나의 웹 브라우저의 정보를 유지하기 위한 세션 정보를 저장하고 있는 객체.
- application : 웹 애플리케이션 Context의 정보를 저장하고 있는 객체.

내장(내부) 객체 사용 시 공통적으로 사용하는 메서드
- setAttribute(String key, Object value)
 ==> 주어진 key 속성의 값을 value로 지정한다.(리턴타입:void)
- getAttribute(String key)
 ==> 주어진 key 속성의 값(value)를 얻어낸다. (리턴타입:Object)
- removeAttribute(String key)
 ==> 주어진 key 속성의 값(value)을 제거한다. (리턴타입:void)
-getAttributeNames() ==> 모든 속성의 이름을 구한다.


JSP 페이지 이동: forward, redirect
- 웹 어플리케이션은 여러 기능을 합쳐 하나의 프로그램을 싱행하는 구조로 되어 있음.
 회원관리 기능, 게시판 관리 기능, 주문 관리 등에 대해 각각의 서블릿이 기능을 수행하게 됨.
- 이 때 프로그램을 실행하다 보면 서블릿끼리 또는 서블릿과 JSP를 연동해서 작업해야 하는 경우가 생김.
 예를 든다면 쇼핑몰의 경우 상품 관리 서블릿과 조회된 상품을 화면에 표시하는 JSP는 각각 따로 존재하게 됨.
 따라서 사용자가 상품 조회를 요청하면 상품 관리 서블릿은 데이터베이스에서 상품 정보를 조회한 후 
 다시 JSP에게 해당 상품 정보를 전달하여 상품 정보를 표시해야 함.
 이러한 페이지 이동이 필수적이라고 생각하면 됨. 
 * 요청에 대한 추가 작업을 다른 서블릿에게 수행하게 함.
 * 요청에 포함된 정보를 다른 서블릿이나 JSP 와 공유할 수 있음~~~~~~~~
 * 요청에 정보를 포함시켜 다른 서블릿에 전달할 수 있음.
 * 모델2 개발 시 서블릿에서 JSP 페이지로 데이터를 전달하는 데 사용됨.


1.forward //많이쓰는거!!@!!!
	- request 영역(scope)에 담긴 값이 유효함.
	- 이동된 화면에 url 창이 안 보인다.(사용자는 이동했는지 알 수 없음.)
	- 서블릿이 직접 요청하는 방식임.
	- 키 값을 넘겨줄 때 사용함.////////
	- RequestDispatcher 객체를 이용함. ==> forward() 메서드를 이용함.
	- 형식) RequestDispatcher rd=
				request.getRequestDispatcher("이동위치");
		   rd.forward(request, response);
		   
		   
		   
		   
2.redirect
	- 클라이언트가 새로 페이지를 요청하는 것과 같은 방식으로 페이지가 이동됨.
	- 웹 브라우저에 재요청하는 방식임.
	- 일반적으로 변수 값을 넘겨줄 때 사용함.
	- request, response 가 유효하지 않음(새로 만들어짐).
	- 이동된 url이 화면에 나타남(보안에 취약).
	- 형식) response.sendRedirect("이동위치")
				












